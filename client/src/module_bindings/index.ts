// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { Connect } from "./connect_reducer.ts";
export { Connect };
import { Disconnect } from "./disconnect_reducer.ts";
export { Disconnect };
import { Tick } from "./tick_reducer.ts";
export { Tick };
import { UpdatePlayerInput } from "./update_player_input_reducer.ts";
export { UpdatePlayerInput };
import { UploadBody } from "./upload_body_reducer.ts";
export { UploadBody };

// Import and reexport all table handle types
import { ColliderTableHandle } from "./collider_table.ts";
export { ColliderTableHandle };
import { LoggedOutPlayerTableHandle } from "./logged_out_player_table.ts";
export { LoggedOutPlayerTableHandle };
import { PlayerTableHandle } from "./player_table.ts";
export { PlayerTableHandle };
import { TickScheduleTableHandle } from "./tick_schedule_table.ts";
export { TickScheduleTableHandle };

// Import and reexport all types
import { Collider } from "./collider_type.ts";
export { Collider };
import { DbVector3 } from "./db_vector_3_type.ts";
export { DbVector3 };
import { InputState } from "./input_state_type.ts";
export { InputState };
import { Player } from "./player_type.ts";
export { Player };
import { TickSchedule } from "./tick_schedule_type.ts";
export { TickSchedule };

const REMOTE_MODULE = {
  tables: {
    collider: {
      tableName: "collider",
      rowType: Collider.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    logged_out_player: {
      tableName: "logged_out_player",
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
    player: {
      tableName: "player",
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
    tick_schedule: {
      tableName: "tick_schedule",
      rowType: TickSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "scheduleId",
    },
  },
  reducers: {
    connect: {
      reducerName: "connect",
      argsType: Connect.getTypeScriptAlgebraicType(),
    },
    disconnect: {
      reducerName: "disconnect",
      argsType: Disconnect.getTypeScriptAlgebraicType(),
    },
    tick: {
      reducerName: "tick",
      argsType: Tick.getTypeScriptAlgebraicType(),
    },
    update_player_input: {
      reducerName: "update_player_input",
      argsType: UpdatePlayerInput.getTypeScriptAlgebraicType(),
    },
    upload_body: {
      reducerName: "upload_body",
      argsType: UploadBody.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "Connect", args: Connect }
| { name: "Disconnect", args: Disconnect }
| { name: "Tick", args: Tick }
| { name: "UpdatePlayerInput", args: UpdatePlayerInput }
| { name: "UploadBody", args: UploadBody }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  onConnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("connect", callback);
  }

  removeOnConnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("connect", callback);
  }

  onDisconnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("disconnect", callback);
  }

  removeOnDisconnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("disconnect", callback);
  }

  tick(schedule: TickSchedule) {
    const __args = { schedule };
    let __writer = new BinaryWriter(1024);
    Tick.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("tick", __argsBuffer, this.setCallReducerFlags.tickFlags);
  }

  onTick(callback: (ctx: ReducerEventContext, schedule: TickSchedule) => void) {
    this.connection.onReducer("tick", callback);
  }

  removeOnTick(callback: (ctx: ReducerEventContext, schedule: TickSchedule) => void) {
    this.connection.offReducer("tick", callback);
  }

  updatePlayerInput(input: InputState, rotation: number) {
    const __args = { input, rotation };
    let __writer = new BinaryWriter(1024);
    UpdatePlayerInput.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_player_input", __argsBuffer, this.setCallReducerFlags.updatePlayerInputFlags);
  }

  onUpdatePlayerInput(callback: (ctx: ReducerEventContext, input: InputState, rotation: number) => void) {
    this.connection.onReducer("update_player_input", callback);
  }

  removeOnUpdatePlayerInput(callback: (ctx: ReducerEventContext, input: InputState, rotation: number) => void) {
    this.connection.offReducer("update_player_input", callback);
  }

  uploadBody(points: DbVector3[], indices: DbVector3[], name: string) {
    const __args = { points, indices, name };
    let __writer = new BinaryWriter(1024);
    UploadBody.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("upload_body", __argsBuffer, this.setCallReducerFlags.uploadBodyFlags);
  }

  onUploadBody(callback: (ctx: ReducerEventContext, points: DbVector3[], indices: DbVector3[], name: string) => void) {
    this.connection.onReducer("upload_body", callback);
  }

  removeOnUploadBody(callback: (ctx: ReducerEventContext, points: DbVector3[], indices: DbVector3[], name: string) => void) {
    this.connection.offReducer("upload_body", callback);
  }

}

export class SetReducerFlags {
  tickFlags: CallReducerFlags = 'FullUpdate';
  tick(flags: CallReducerFlags) {
    this.tickFlags = flags;
  }

  updatePlayerInputFlags: CallReducerFlags = 'FullUpdate';
  updatePlayerInput(flags: CallReducerFlags) {
    this.updatePlayerInputFlags = flags;
  }

  uploadBodyFlags: CallReducerFlags = 'FullUpdate';
  uploadBody(flags: CallReducerFlags) {
    this.uploadBodyFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get collider(): ColliderTableHandle {
    return new ColliderTableHandle(this.connection.clientCache.getOrCreateTable<Collider>(REMOTE_MODULE.tables.collider));
  }

  get loggedOutPlayer(): LoggedOutPlayerTableHandle {
    return new LoggedOutPlayerTableHandle(this.connection.clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.logged_out_player));
  }

  get player(): PlayerTableHandle {
    return new PlayerTableHandle(this.connection.clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.player));
  }

  get tickSchedule(): TickScheduleTableHandle {
    return new TickScheduleTableHandle(this.connection.clientCache.getOrCreateTable<TickSchedule>(REMOTE_MODULE.tables.tick_schedule));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
